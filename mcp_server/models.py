# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:36:20+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class AccessApprovalServiceAccount(BaseModel):
    accountEmail: Optional[str] = Field(
        None, description='Email address of the service account.'
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the Access Approval service account. Format is one of: * "projects/{project}/serviceAccount" * "folders/{folder}/serviceAccount" * "organizations/{organization}/serviceAccount"',
    )


class AccessLocations(BaseModel):
    principalOfficeCountry: Optional[str] = Field(
        None,
        description='The "home office" location of the principal. A two-letter country code (ISO 3166-1 alpha-2), such as "US", "DE" or "GB" or a region code. In some limited situations Google systems may refer refer to a region code instead of a country code. Possible Region Codes: * ASI: Asia * EUR: Europe * OCE: Oceania * AFR: Africa * NAM: North America * SAM: South America * ANT: Antarctica * ANY: Any location',
    )
    principalPhysicalLocationCountry: Optional[str] = Field(
        None,
        description='Physical location of the principal at the time of the access. A two-letter country code (ISO 3166-1 alpha-2), such as "US", "DE" or "GB" or a region code. In some limited situations Google systems may refer refer to a region code instead of a country code. Possible Region Codes: * ASI: Asia * EUR: Europe * OCE: Oceania * AFR: Africa * NAM: North America * SAM: South America * ANT: Antarctica * ANY: Any location',
    )


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CUSTOMER_INITIATED_SUPPORT = 'CUSTOMER_INITIATED_SUPPORT'
    GOOGLE_INITIATED_SERVICE = 'GOOGLE_INITIATED_SERVICE'
    GOOGLE_INITIATED_REVIEW = 'GOOGLE_INITIATED_REVIEW'
    THIRD_PARTY_DATA_REQUEST = 'THIRD_PARTY_DATA_REQUEST'
    GOOGLE_RESPONSE_TO_PRODUCTION_ALERT = 'GOOGLE_RESPONSE_TO_PRODUCTION_ALERT'


class AccessReason(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='More detail about certain reason types. See comments for each type above.',
    )
    type: Optional[Type] = Field(None, description='Type of access justification.')


class ApproveApprovalRequestMessage(BaseModel):
    expireTime: Optional[str] = Field(
        None, description='The expiration time of this approval.'
    )


class DismissApprovalRequestMessage(BaseModel):
    pass


class DismissDecision(BaseModel):
    dismissTime: Optional[str] = Field(
        None, description='The time at which the approval request was dismissed.'
    )
    implicit: Optional[bool] = Field(
        None,
        description='This field will be true if the ApprovalRequest was implicitly dismissed due to inaction by the access approval approvers (the request is not acted on by the approvers before the exiration time).',
    )


class Empty(BaseModel):
    pass


class EnrollmentLevel(Enum):
    ENROLLMENT_LEVEL_UNSPECIFIED = 'ENROLLMENT_LEVEL_UNSPECIFIED'
    BLOCK_ALL = 'BLOCK_ALL'


class EnrolledService(BaseModel):
    cloudProduct: Optional[str] = Field(
        None,
        description="The product for which Access Approval will be enrolled. Allowed values are listed below (case-sensitive): * all * GA * App Engine * Artifact Registry * BigQuery * Certificate Authority Service * Cloud Bigtable * Cloud Key Management Service * Compute Engine * Cloud Composer * Cloud Dataflow * Cloud Dataproc * Cloud DLP * Cloud EKM * Cloud Firestore * Cloud HSM * Cloud Identity and Access Management * Cloud Logging * Cloud NAT * Cloud Pub/Sub * Cloud Spanner * Cloud SQL * Cloud Storage * Google Kubernetes Engine * Organization Policy Serivice * Persistent Disk * Resource Manager * Secret Manager * Speaker ID Note: These values are supported as input for legacy purposes, but will not be returned from the API. * all * ga-only * appengine.googleapis.com * artifactregistry.googleapis.com * bigquery.googleapis.com * bigtable.googleapis.com * container.googleapis.com * cloudkms.googleapis.com * cloudresourcemanager.googleapis.com * cloudsql.googleapis.com * compute.googleapis.com * dataflow.googleapis.com * dataproc.googleapis.com * dlp.googleapis.com * iam.googleapis.com * logging.googleapis.com * orgpolicy.googleapis.com * pubsub.googleapis.com * spanner.googleapis.com * secretmanager.googleapis.com * speakerid.googleapis.com * storage.googleapis.com Calls to UpdateAccessApprovalSettings using 'all' or any of the XXX.googleapis.com will be translated to the associated product name ('all', 'App Engine', etc.). Note: 'all' will enroll the resource in all products supported at both 'GA' and 'Preview' levels. More information about levels of support is available at https://cloud.google.com/access-approval/docs/supported-services",
    )
    enrollmentLevel: Optional[EnrollmentLevel] = Field(
        None, description='The enrollment level of the service.'
    )


class InvalidateApprovalRequestMessage(BaseModel):
    pass


class ResourceProperties(BaseModel):
    excludesDescendants: Optional[bool] = Field(
        None,
        description='Whether an approval will exclude the descendants of the resource being requested.',
    )


class SignatureInfo(BaseModel):
    customerKmsKeyVersion: Optional[str] = Field(
        None,
        description='The resource name of the customer CryptoKeyVersion used for signing.',
    )
    googlePublicKeyPem: Optional[str] = Field(
        None,
        description='The public key for the Google default signing, encoded in PEM format. The signature was created using a private key which may be verified using this public key.',
    )
    signature: Optional[str] = Field(None, description='The digital signature.')


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AccessApprovalSettings(BaseModel):
    activeKeyVersion: Optional[str] = Field(
        None,
        description='The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a Google-managed key should be used for signing. This property will be ignored if set by an ancestor of this resource, and new non-empty values may not be set.',
    )
    ancestorHasActiveKeyVersion: Optional[bool] = Field(
        None,
        description='Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that an ancestor of this Project or Folder has set active_key_version (this field will always be unset for the organization since organizations do not have ancestors).',
    )
    enrolledAncestor: Optional[bool] = Field(
        None,
        description='Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Project or Folder (this field will always be unset for the organization since organizations do not have ancestors).',
    )
    enrolledServices: Optional[List[EnrolledService]] = Field(
        None,
        description='A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the resource given by name against any of these services contained here will be required to have explicit approval. If name refers to an organization, enrollment can be done for individual services. If name refers to a folder or project, enrollment can only be done on an all or nothing basis. If a cloud_product is repeated in this list, the first entry will be honored and all following entries will be discarded. A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.',
    )
    invalidKeyVersion: Optional[bool] = Field(
        None,
        description="Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that there is some configuration issue with the active_key_version configured at this level in the resource hierarchy (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it, etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited top-down.",
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the settings. Format is one of: * "projects/{project}/accessApprovalSettings" * "folders/{folder}/accessApprovalSettings" * "organizations/{organization}/accessApprovalSettings"',
    )
    notificationEmails: Optional[List[str]] = Field(
        None,
        description='A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email addresses are allowed.',
    )


class ApproveDecision(BaseModel):
    approveTime: Optional[str] = Field(
        None, description='The time at which approval was granted.'
    )
    autoApproved: Optional[bool] = Field(
        None, description='True when the request has been auto-approved.'
    )
    expireTime: Optional[str] = Field(
        None, description='The time at which the approval expires.'
    )
    invalidateTime: Optional[str] = Field(
        None,
        description='If set, denotes the timestamp at which the approval is invalidated.',
    )
    signatureInfo: Optional[SignatureInfo] = Field(
        None,
        description='The signature for the ApprovalRequest and details on how it was signed.',
    )


class ApprovalRequest(BaseModel):
    approve: Optional[ApproveDecision] = Field(None, description='Access was approved.')
    dismiss: Optional[DismissDecision] = Field(
        None, description='The request was dismissed.'
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the request. Format is "{projects|folders|organizations}/{id}/approvalRequests/{approval_request}".',
    )
    requestTime: Optional[str] = Field(
        None, description='The time at which approval was requested.'
    )
    requestedExpiration: Optional[str] = Field(
        None,
        description='The requested expiration for the approval. If the request is approved, access will be granted from the time of approval until the expiration time.',
    )
    requestedLocations: Optional[AccessLocations] = Field(
        None, description='The locations for which approval is being requested.'
    )
    requestedReason: Optional[AccessReason] = Field(
        None, description='The justification for which approval is being requested.'
    )
    requestedResourceName: Optional[str] = Field(
        None,
        description='The resource for which approval is being requested. The format of the resource name is defined at https://cloud.google.com/apis/design/resource_names. The resource name here may either be a "full" resource name (e.g. "//library.googleapis.com/shelves/shelf1/books/book2") or a "relative" resource name (e.g. "shelves/shelf1/books/book2") as described in the resource name specification.',
    )
    requestedResourceProperties: Optional[ResourceProperties] = Field(
        None,
        description='Properties related to the resource represented by requested_resource_name.',
    )


class ListApprovalRequestsResponse(BaseModel):
    approvalRequests: Optional[List[ApprovalRequest]] = Field(
        None, description='Approval request details.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more.',
    )
